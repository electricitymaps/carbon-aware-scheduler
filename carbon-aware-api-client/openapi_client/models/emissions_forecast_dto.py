# coding: utf-8

"""
    CarbonAware.WebAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.emissions_data_dto import EmissionsDataDTO
from typing import Optional, Set
from typing_extensions import Self

class EmissionsForecastDTO(BaseModel):
    """
    EmissionsForecastDTO
    """ # noqa: E501
    generated_at: Optional[datetime] = Field(default=None, description="Timestamp when the forecast was generated.", alias="generatedAt")
    requested_at: Optional[datetime] = Field(default=None, description="For current requests, this value is the timestamp the request for forecast data was made.  For historical forecast requests, this value is the timestamp used to access the most   recently generated forecast as of that time.", alias="requestedAt")
    location: Optional[StrictStr] = Field(default=None, description="The location of the forecast")
    data_start_at: Optional[datetime] = Field(default=None, description="Start time boundary of forecasted data points. Ignores forecast data points before this time.  Defaults to the earliest time in the forecast data.", alias="dataStartAt")
    data_end_at: Optional[datetime] = Field(default=None, description="End time boundary of forecasted data points. Ignores forecast data points after this time.  Defaults to the latest time in the forecast data.", alias="dataEndAt")
    window_size: Optional[StrictInt] = Field(default=None, description="The estimated duration (in minutes) of the workload.  Defaults to the duration of a single forecast data point.", alias="windowSize")
    optimal_data_points: Optional[List[EmissionsDataDTO]] = Field(default=None, description="The optimal forecasted data point within the 'forecastData' array.  Null if 'forecastData' array is empty.", alias="optimalDataPoints")
    forecast_data: Optional[List[EmissionsDataDTO]] = Field(default=None, description="The forecasted data points transformed and filtered to reflect the specified time and window parameters.  Points are ordered chronologically; Empty array if all data points were filtered out.  E.G. dataStartAt and dataEndAt times outside the forecast period; windowSize greater than total duration of forecast data;", alias="forecastData")
    __properties: ClassVar[List[str]] = ["generatedAt", "requestedAt", "location", "dataStartAt", "dataEndAt", "windowSize", "optimalDataPoints", "forecastData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EmissionsForecastDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in optimal_data_points (list)
        _items = []
        if self.optimal_data_points:
            for _item_optimal_data_points in self.optimal_data_points:
                if _item_optimal_data_points:
                    _items.append(_item_optimal_data_points.to_dict())
            _dict['optimalDataPoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in forecast_data (list)
        _items = []
        if self.forecast_data:
            for _item_forecast_data in self.forecast_data:
                if _item_forecast_data:
                    _items.append(_item_forecast_data.to_dict())
            _dict['forecastData'] = _items
        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict['location'] = None

        # set to None if optimal_data_points (nullable) is None
        # and model_fields_set contains the field
        if self.optimal_data_points is None and "optimal_data_points" in self.model_fields_set:
            _dict['optimalDataPoints'] = None

        # set to None if forecast_data (nullable) is None
        # and model_fields_set contains the field
        if self.forecast_data is None and "forecast_data" in self.model_fields_set:
            _dict['forecastData'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EmissionsForecastDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "generatedAt": obj.get("generatedAt"),
            "requestedAt": obj.get("requestedAt"),
            "location": obj.get("location"),
            "dataStartAt": obj.get("dataStartAt"),
            "dataEndAt": obj.get("dataEndAt"),
            "windowSize": obj.get("windowSize"),
            "optimalDataPoints": [EmissionsDataDTO.from_dict(_item) for _item in obj["optimalDataPoints"]] if obj.get("optimalDataPoints") is not None else None,
            "forecastData": [EmissionsDataDTO.from_dict(_item) for _item in obj["forecastData"]] if obj.get("forecastData") is not None else None
        })
        return _obj


