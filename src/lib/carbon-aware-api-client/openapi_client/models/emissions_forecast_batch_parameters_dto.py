# coding: utf-8

"""
    CarbonAware.WebAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EmissionsForecastBatchParametersDTO(BaseModel):
    """
    EmissionsForecastBatchParametersDTO
    """ # noqa: E501
    requested_at: Optional[datetime] = Field(default=None, description="For historical forecast requests, this value is the timestamp used to access the most  recently generated forecast as of that time.", alias="requestedAt")
    location: Optional[StrictStr] = Field(default=None, description="The location of the forecast")
    data_start_at: Optional[datetime] = Field(default=None, description="Start time boundary of forecasted data points.Ignores current forecast data points before this time.  Defaults to the earliest time in the forecast data.", alias="dataStartAt")
    data_end_at: Optional[datetime] = Field(default=None, description="End time boundary of forecasted data points. Ignores current forecast data points after this time.  Defaults to the latest time in the forecast data.", alias="dataEndAt")
    window_size: Optional[StrictInt] = Field(default=None, description="The estimated duration (in minutes) of the workload.  Defaults to the duration of a single forecast data point.", alias="windowSize")
    __properties: ClassVar[List[str]] = ["requestedAt", "location", "dataStartAt", "dataEndAt", "windowSize"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EmissionsForecastBatchParametersDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if requested_at (nullable) is None
        # and model_fields_set contains the field
        if self.requested_at is None and "requested_at" in self.model_fields_set:
            _dict['requestedAt'] = None

        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict['location'] = None

        # set to None if data_start_at (nullable) is None
        # and model_fields_set contains the field
        if self.data_start_at is None and "data_start_at" in self.model_fields_set:
            _dict['dataStartAt'] = None

        # set to None if data_end_at (nullable) is None
        # and model_fields_set contains the field
        if self.data_end_at is None and "data_end_at" in self.model_fields_set:
            _dict['dataEndAt'] = None

        # set to None if window_size (nullable) is None
        # and model_fields_set contains the field
        if self.window_size is None and "window_size" in self.model_fields_set:
            _dict['windowSize'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EmissionsForecastBatchParametersDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "requestedAt": obj.get("requestedAt"),
            "location": obj.get("location"),
            "dataStartAt": obj.get("dataStartAt"),
            "dataEndAt": obj.get("dataEndAt"),
            "windowSize": obj.get("windowSize")
        })
        return _obj


